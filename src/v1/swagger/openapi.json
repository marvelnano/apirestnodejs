{
  "openapi": "3.0.3",
  "info": {
    "title": "API REST con Node JS",
    "description": "Documentación de API REST con Node JS",
    "version": "1.0.0",
    "contact": {
      "name": "JV Developer",
      "email": "jv@email.com"
    }
  },
  "servers": [
    {
      "url": "http://{host}:{port}/api/{basePath}",
      "description": "NodeJS",
      "variables": {
        "host": {
          "default": "localhost",
          "description": "Development server, Staging server, Production server example.com",
          "enum": [
            "localhost",
            "development",
            "staging",
            "api"
          ]
        },
        "port": {
          "default": "3000",
          "enum": [
            "3000",
            "3001"
          ]
        },
        "basePath": {
          "default": "v1",
          "enum": [
            "v1",
            "v2",
            "v3"
          ]
        }
      }
    }
  ],
  "tags": [
    {
      "name": "estudiantes",
      "description": "CRUD de estudiantes"
    },
    {
      "name": "categorias",
      "description": "CRUD de categorías"
    }
  ],
  "paths": {
    "/students/login": {
      "post": {
        "tags": [
          "estudiantes"
        ],
        "summary": "Genera un nuevo token si se loguea correctamente",
        "description": "Genera un nuevo token",
        "operationId": "generateToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Token Generado Correctamente",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExitoGenerarToken"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/students/listar": {
      "get": {
        "tags": [
          "estudiantes"
        ],
        "summary": "Lista todos los estudiantes",
        "description": "Lista todos los estudiantes",
        "responses": {
          "200": {
            "description": "Estudiantes Listados Correctamente",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExitoListarEstudiantes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/students/registrar": {
      "post": {
        "tags": [
          "estudiantes"
        ],
        "summary": "Registra nuevo estudiante",
        "description": "Registra nuevo estudiante",
        "operationId": "addStudent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Student"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Estudiante Registrado Correctamente",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExitoRegistrarEstudiantes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/students/{id}": {
      "get": {
        "tags": [
          "estudiantes"
        ],
        "summary": "Buscar estudiante según su ID",
        "description": "Buscar estudiante según su ID",
        "operationId": "findStudentById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "El id del estudiante"
          }
        ],
        "responses": {
          "200": {
            "description": "Estudiante Encontrado Correctamente",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExitoListarEstudiantes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "estudiantes"
        ],
        "summary": "Actualizar estudiante según su ID",
        "description": "Actualizar datos del estudiante según su ID",
        "operationId": "updateStudentById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "El id del estudiante"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Student"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Estudiante Actualizado Correctamente",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExitoListarEstudiantes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "estudiantes"
        ],
        "summary": "Eliminar estudiante según su ID",
        "description": "Eliminar datos del estudiante según su ID",
        "operationId": "deleteStudentById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "El id del estudiante"
          }
        ],
        "responses": {
          "200": {
            "description": "Estudiante Eliminado Correctamente",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExitoListarEstudiantes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/categories/list": {
      "get": {
        "tags": [
          "categorias"
        ],
        "summary": "Lista todas las categorías",
        "description": "Lista todas las categorías",
        "responses": {
          "200": {
            "description": "Listados Correctamente",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExitoListarEstudiantes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "BadRequest": {
        "description": "(BadRequest) los datos enviados son incorrectos o hay datos obligatorios no enviados"
      },
      "Unauthorized": {
        "description": "(Unauthorized) no hay autorización para llamar el servicio"
      },
      "NotFound": {
        "description": "(NotFound) no se encontró la información"
      },
      "ServerError": {
        "description": "(ServerError) Error en el servidor"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "id de usuario"
          },
          "name": {
            "type": "string",
            "description": "nombre de usuario"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "example": {
          "id": 1,
          "name": "user"
        }
      },
      "Student": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "nombre del estudiante"
          },
          "age": {
            "type": "integer",
            "description": "edad del estudiante"
          },
          "enroll": {
            "type": "string",
            "description": "estado del estudiante"
          }
        },
        "required": [
          "name",
          "age",
          "enroll"
        ],
        "example": {
          "name": "Kalef",
          "age": 10,
          "enroll": "true"
        }
      },
      "ExitoGenerarToken": {
        "type": "object",
        "properties": {
          "codigoError": {
            "type": "string",
            "enum": [
              "000"
            ],
            "description": "Código de error al generar token"
          },
          "descripcion": {
            "type": "string",
            "enum": [
              "Token generado"
            ],
            "description": "Descripción del servicio"
          },
          "tipoToken": {
            "type": "string",
            "enum": [
              "Bearer"
            ],
            "description": "Tipo de token"
          },
          "tokenAcceso": {
            "type": "string",
            "enum": [
              "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            ],
            "description": "Token generado si usuario se loguea"
          },
          "fechaCreacion": {
            "type": "string",
            "enum": [
              "6/3/2023, 09:26:00"
            ],
            "description": "Fecha de creación del token"
          },
          "fechaExpiracion": {
            "type": "string",
            "enum": [
              "6/3/2023, 09:28:00"
            ],
            "description": "Fecha de expiración del token"
          },
          "duracionToken": {
            "type": "string",
            "enum": [
              "2 min"
            ],
            "description": "Tiempo en minutos que dura el token"
          }
        }
      },
      "ExitoListarEstudiantes": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "enum": [
              1
            ],
            "description": "el id del estudiante"
          },
          "name": {
            "type": "string",
            "enum": [
              "gael"
            ],
            "description": "nombre del estudiante"
          },
          "age": {
            "type": "integer",
            "enum": [
              3
            ],
            "description": "edad del estudiante"
          },
          "enroll": {
            "type": "string",
            "enum": [
              "true"
            ],
            "description": "estado del estudiante"
          }
        }
      },
      "ExitoRegistrarEstudiantes": {
        "type": "object",
        "properties": {
          "respuesta": {
            "type": "integer",
            "enum": [
              1
            ],
            "description": "Bandera que nos indica si llamada al servicio fue exitosa"
          },
          "id": {
            "type": "integer",
            "enum": [
              1
            ],
            "description": "el id del estudiante"
          },
          "name": {
            "type": "string",
            "enum": [
              "gael"
            ],
            "description": "nombre del estudiante"
          },
          "age": {
            "type": "integer",
            "enum": [
              3
            ],
            "description": "edad del estudiante"
          },
          "enroll": {
            "type": "string",
            "enum": [
              "true"
            ],
            "description": "estado del estudiante"
          }
        }
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    }
  }
}